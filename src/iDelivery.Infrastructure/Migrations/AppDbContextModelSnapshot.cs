// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iDelivery.Infrastructure.Persistence;

#nullable disable

namespace iDelivery.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("iDelivery.Domain.AccountAggregate.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("iDelivery.Domain.AccountAggregate.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("iDelivery.Domain.AccountAggregate.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Email");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("iDelivery.Domain.CommandAggregate.Command", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PreferredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PreferredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quarter")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("Latitude");

                    b.HasIndex("Longitude");

                    b.HasIndex("Quarter");

                    b.HasIndex("RefNum");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("iDelivery.Domain.PlanAggregate.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("iDelivery.Domain.CourierAggregate.Courier", b =>
                {
                    b.HasBaseType("iDelivery.Domain.AccountAggregate.Entities.User");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Courier");
                });

            modelBuilder.Entity("iDelivery.Domain.ManagerAggregate.Manager", b =>
                {
                    b.HasBaseType("iDelivery.Domain.AccountAggregate.Entities.User");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("iDelivery.Domain.SupervisorAggregate.Supervisor", b =>
                {
                    b.HasBaseType("iDelivery.Domain.AccountAggregate.Entities.User");

                    b.HasDiscriminator().HasValue("Supervisor");
                });

            modelBuilder.Entity("iDelivery.Domain.AccountAggregate.Entities.Subscription", b =>
                {
                    b.HasOne("iDelivery.Domain.AccountAggregate.Account", "Account")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iDelivery.Domain.PlanAggregate.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("iDelivery.Domain.AccountAggregate.Entities.User", b =>
                {
                    b.HasOne("iDelivery.Domain.AccountAggregate.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("iDelivery.Domain.CommandAggregate.Command", b =>
                {
                    b.OwnsMany("iDelivery.Domain.AccountAggregate.Complaint", "Complaints", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CommandId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ManagerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Object")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PictureBlob")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("CommandId");

                            b1.ToTable("Complaints", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CommandId");
                        });

                    b.OwnsOne("iDelivery.Domain.CommandAggregate.Entities.DeliveryStatus", "DeliveryStatus", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CommandId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("FileBlob")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FileType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("CommandId")
                                .IsUnique();

                            b1.ToTable("DeliveryStatuses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CommandId");
                        });

                    b.Navigation("Complaints");

                    b.Navigation("DeliveryStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("iDelivery.Domain.ManagerAggregate.Manager", b =>
                {
                    b.OwnsMany("iDelivery.Domain.Common.ValueObjects.ComplaintId", "ComplaintIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ManagerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ManagerId");

                            b1.ToTable("ComplaintIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ManagerId");
                        });

                    b.Navigation("ComplaintIds");
                });

            modelBuilder.Entity("iDelivery.Domain.SupervisorAggregate.Supervisor", b =>
                {
                    b.OwnsMany("iDelivery.Domain.CourierAggregate.ValueObjects.CourierId", "CourierIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("SupervisorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("SupervisorId");

                            b1.ToTable("CourierIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SupervisorId");
                        });

                    b.Navigation("CourierIds");
                });

            modelBuilder.Entity("iDelivery.Domain.AccountAggregate.Account", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("iDelivery.Domain.PlanAggregate.Plan", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
